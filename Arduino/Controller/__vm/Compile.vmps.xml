<VisualMicro>
  <Program Name="Controller" Ext=".ino" Location="C:\Users\MiniMinor\Documents\ScarecrowRepo\ScarecrowRepo\Arduino\Controller">
    <Compile IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" ReCompileIfSourceIsNewer="1" BuildPath="C:\Users\MiniMinor\AppData\Local\Temp\VMBuilds\Controller\mega_atmega2560\Debug" IsDebugStart="1" SketchName="Controller" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 50;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="mega_atmega2560" Description="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\MiniMinor\Documents\Arduino" name="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" vid.2="0x2A03" pid.2="0x0010" vid.3="0x2A03" pid.3="0x0042" vid.4="0x2341" pid.4="0x0210" vid.5="0x2341" pid.5="0x0242" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="253952" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="10803" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Program Files (x86)\Arduino\hardware\arduino" originalid="mega" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include\;{intellisense.tools.path}avr\include\avr\;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.19" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\Extensions\pbd1usl1.2ll\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.extra_params="-Pusb" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.4-arduino2.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.tools-avr.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino9.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.1.1.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" upload.protocol="wiring" upload.maximum_size="253952" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" runtime.vm.boardinfo.id="mega_atmega2560" runtime.vm.boardinfo.name="mega_atmega2560" runtime.vm.boardinfo.desc="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" runtime.vm.boardinfo.src_location="C:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.9.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.appid="arduino16x" location.sketchbook="C:\Users\MiniMinor\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="Arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved.name="mega" build.variant.vmresolved.full_path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM7" serial.port="COM7" serial.port.num="7" serial.port.caption="COM7   - Arduino Mega 2560" serial.Caption="Arduino Mega 2560 (COM7)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Arduino Mega 2560" serial.DeviceID="USB\VID_2A03&amp;PID_0042\5563930383435140E1B2" serial.HardwareID.value0="USB\VID_2A03&amp;PID_0042" serial.Manufacturer="Arduino Srl (www.arduino.org)" serial.Name="Arduino Mega 2560 (COM7)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2A03&amp;PID_0042\5563930383435140E1B2" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="DESKTOP-1SRGFQH" serial.vid="0x2A03" serial.pid="0x0042" serial.iserial="5563930383435140E1B2" serial.port.iserial="5563930383435140E1B2" build.path="C:\Users\MiniMinor\AppData\Local\Temp\VMBuilds\Controller\mega_atmega2560\Debug" build.project_name="Controller.ino" build.project_path="C:\Users\MiniMinor\Documents\ScarecrowRepo\ScarecrowRepo\Arduino\Controller" ProjectDir="C:\Users\MiniMinor\Documents\ScarecrowRepo\ScarecrowRepo\Arduino\Controller\" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\MiniMinor\AppData\Local\Temp\VMBuilds\Controller\mega_atmega2560\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="Controller.ino, line 169" Id="9678bf95-14ed-4e88-94b4-a32447ceeea3" Enabled="0" Message="  Millis is currently {millis()}.&#xD;&#xA;    This tutorial debug trace point prints a message every 250ms&#xD;&#xA;    The break point property called 'Continue Execution' controls if code should pause here and wait for you to click 'Continue'.&#xD;&#xA;    To stop debug, click stop debugging or close/stop the serial monitor.&#xD;&#xA;    When debug ends, serial debug will continue to break/pause the mcu or transmit trace message, wifi debug will not.&#xD;&#xA;    This breakpoint exists at the start of the loop() function, where you see a red dot.&#xD;&#xA;    The red dot is a ‘breakpoint’. Edit the properties of a breakpoint by right clicking it or open the 'Debug&gt;Other Windows&gt;Breakpoint List'&#xD;&#xA;    This breakpoint is automatically set by Visual Micro to demonstrate the Arduino debugger.&#xD;&#xA;    Add your own breakpoints by placing the cursor on any code line and pressing F9. Press F9 again to delete the breakpoint.&#xD;&#xA;    Read more about the Visual Micro debugger at http://www.visualmicro.com/page/Debugging-for-Arduino.aspx&#xD;&#xA;    Take some time to learn about debugging, it’s worth it!&#xD;&#xA;    To switch the demo breakpoint and other tips off, deselect Visual Micro&gt;Tutorial Mode.&#xD;&#xA;    Switch debugging off by changing from tool bar (Configuratin) from 'Debug' to 'Release'" MessageTextType="0" PreProcessedMessage="  Millis is currently {0}.&#xD;&#xA;    This tutorial debug trace point prints a message every 250ms&#xD;&#xA;    The break point property called 'Continue Execution' controls if code should pause here and wait for you to click 'Continue'.&#xD;&#xA;    To stop debug, click stop debugging or close/stop the serial monitor.&#xD;&#xA;    When debug ends, serial debug will continue to break/pause the mcu or transmit trace message, wifi debug will not.&#xD;&#xA;    This breakpoint exists at the start of the loop() function, where you see a red dot.&#xD;&#xA;    The red dot is a ‘breakpoint’. Edit the properties of a breakpoint by right clicking it or open the 'Debug&gt;Other Windows&gt;Breakpoint List'&#xD;&#xA;    This breakpoint is automatically set by Visual Micro to demonstrate the Arduino debugger.&#xD;&#xA;    Add your own breakpoints by placing the cursor on any code line and pressing F9. Press F9 again to delete the breakpoint.&#xD;&#xA;    Read more about the Visual Micro debugger at http://www.visualmicro.com/page/Debugging-for-Arduino.aspx&#xD;&#xA;    Take some time to learn about debugging, it’s worth it!&#xD;&#xA;    To switch the demo breakpoint and other tips off, deselect Visual Micro&gt;Tutorial Mode.&#xD;&#xA;    Switch debugging off by changing from tool bar (Configuratin) from 'Debug' to 'Release'" Condition="millis()&gt;0 || millis()&gt;1" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="169" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="250" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='9678bf95-14ed-4e88-94b4-a32447ceeea3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>162	
163		Serial.begin(SERIAL_PORT_BAUD);
164		altSerial.begin(GPS_BAUD);
165	
166		//Serial.write("Debug mode");
167	}
168	
--&gt;169	void loop() {
170		int value_op = analogRead(opSens);
171		//Serial.print("Debug Pin Value = ");
172		//Serial.println(value_op);
173	
174		// ****
175		// Code provide by: 
176		rc_read_values();
177	
178		//Serial.print(F("yAX ")); Serial.print(rc_values[RC_xAxis]); Serial.println("\t");
</Source>
        <MessageVariables>
          <MessageVariable Name="millis()" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="Controller.ino, line 585" Id="3b46fb9e-baf5-4809-a99c-da8bfc5c9133" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="585" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3b46fb9e-baf5-4809-a99c-da8bfc5c9133'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>578	}
579	
580	void setSpeed(int speed)
581	{
582		analogWrite(PWM_SPEED, speed);
583	}
584	
--&gt;585	void turnMotor()
586	{
587	
588		if (turnDirection == straight)
589		{
590			if (oldTurnDirection == left)
591			{
592				unsigned long start = millis();
593				analogWrite(PWM_TURN, TRC_MAX);
594				
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="Controller.ino, line 602" Id="3612fd98-5157-4a4e-bfc3-eca34df82af9" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="602" FileColumn="1" FunctionName="turnMotor()" FunctionLineOffset="19" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3612fd98-5157-4a4e-bfc3-eca34df82af9'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>595				if (start - startTime_4 &gt;= turn_speed_total)
596				{		
597					analogWrite(PWM_TURN, TRC_NEUTRAL);
598					startTime_4 = start;
599					oldTurnDirection = straight;
600				}
601			}
--&gt;602			if (oldTurnDirection == right) // if direction was orginally right and going straight
603			{
604				unsigned long start = millis();
605				analogWrite(PWM_TURN, TRC_MIN); 
606	
607				if (start - startTime_5 &gt;= turn_speed_total)
608				{
609					analogWrite(PWM_TURN, TRC_NEUTRAL);
610					no_right = false;
611					startTime_5 = start;
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="Controller.ino, line 590" Id="3eebf350-3236-4ba8-a129-5329cc50a472" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="590" FileColumn="1" FunctionName="turnMotor()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3eebf350-3236-4ba8-a129-5329cc50a472'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>583	}
584	
585	void turnMotor()
586	{
587	
588		if (turnDirection == straight)
589		{
--&gt;590			if (oldTurnDirection == left)
591			{
592				unsigned long start = millis();
593				analogWrite(PWM_TURN, TRC_MAX);
594				
595				if (start - startTime_4 &gt;= turn_speed_total)
596				{		
597					analogWrite(PWM_TURN, TRC_NEUTRAL);
598					startTime_4 = start;
599					oldTurnDirection = straight;
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="Controller.ino, line 637" Id="771373ba-80f8-42b8-b8a1-37118e3ec708" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="637" FileColumn="1" FunctionName="turnMotor()" FunctionLineOffset="54" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='771373ba-80f8-42b8-b8a1-37118e3ec708'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>630			{
631				turnLeft();
632				oldTurnDirection = left;
633			}
634			
635		}
636	
--&gt;637		else if (turnDirection == right)
638		{	
639			if (oldTurnDirection == left)
640			{
641				turnDirection = straight;
642				turnMotor();
643				turnDirection = right;
644				turnRight();
645				oldTurnDirection = right;
646			}
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="Controller.ino, line 588" Id="4015eb38-daf2-4242-a3b9-82e458eec4a2" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="588" FileColumn="1" FunctionName="turnMotor()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4015eb38-daf2-4242-a3b9-82e458eec4a2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>581	{
582		analogWrite(PWM_SPEED, speed);
583	}
584	
585	void turnMotor()
586	{
587	
--&gt;588		if (turnDirection == straight)
589		{
590			if (oldTurnDirection == left)
591			{
592				unsigned long start = millis();
593				analogWrite(PWM_TURN, TRC_MAX);
594				
595				if (start - startTime_4 &gt;= turn_speed_total)
596				{		
597					analogWrite(PWM_TURN, TRC_NEUTRAL);
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="Controller.ino, line 621" Id="552973d7-659f-49ff-b51d-62d3e3fe6c67" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="621" FileColumn="1" FunctionName="turnMotor()" FunctionLineOffset="39" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='552973d7-659f-49ff-b51d-62d3e3fe6c67'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>614			}
615			else
616				oldTurnDirection = straight;
617		}
618	
619		else if (turnDirection == left)
620		{
--&gt;621			if (oldTurnDirection == right)
622			{
623				turnDirection = straight;
624				turnMotor();
625				turnDirection = left;
626				turnLeft();
627				oldTurnDirection = left;
628			}
629			else
630			{
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="Controller.ino, line 619" Id="b4eb1497-69de-4548-91f3-8e53e7eac264" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="619" FileColumn="1" FunctionName="turnMotor()" FunctionLineOffset="37" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b4eb1497-69de-4548-91f3-8e53e7eac264'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>612					oldTurnDirection = straight;
613				}
614			}
615			else
616				oldTurnDirection = straight;
617		}
618	
--&gt;619		else if (turnDirection == left)
620		{
621			if (oldTurnDirection == right)
622			{
623				turnDirection = straight;
624				turnMotor();
625				turnDirection = left;
626				turnLeft();
627				oldTurnDirection = left;
628			}
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="Controller.ino, line 545" Id="0f71d9e2-c8da-4801-8a67-88c31b378dfe" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="545" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='0f71d9e2-c8da-4801-8a67-88c31b378dfe'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>538		int v;
539		return (int)&amp;v - (__brkval == 0 ? (int)&amp;__heap_start : (int)__brkval);
540	} // freeRam()
541	
542	//
543	// ****
544	
--&gt;545	void turnLeft()
546	{
547		unsigned long start = millis();
548	
549		analogWrite(PWM_TURN, TRC_MIN);
550	
551		if (start - startTime_6 &gt;= turn_speed_total)
552		{
553			Serial.println("Turning left");
554			turnDirection = straight;
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="Controller.ino, line 562" Id="2482f74d-73a7-465c-9ecb-37362cc363b9" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="562" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2482f74d-73a7-465c-9ecb-37362cc363b9'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>555			analogWrite(PWM_TURN, TRC_NEUTRAL);
556			no_right = false;
557			startTime_6 = start;
558		}
559		return;
560	
561	}
--&gt;562	void turnRight() //turn to the right
563	{
564		if (no_right != true) // checks to make sure right direction does not go over 1 in throw
565		{
566			unsigned long start = millis();
567			analogWrite(PWM_TURN, TRC_MAX);
568	
569			if (start - startTime_3 &gt;= turn_speed_total)
570			{
571				Serial.println("Turning right");
</Source>
      </BreakPoint>
      <BreakPoint Index="11" Name="Controller.ino, line 569" Id="66910db4-1bfe-4b9a-a15e-e2aec121789d" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="569" FileColumn="1" FunctionName="turnRight()" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='66910db4-1bfe-4b9a-a15e-e2aec121789d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>562	void turnRight() //turn to the right
563	{
564		if (no_right != true) // checks to make sure right direction does not go over 1 in throw
565		{
566			unsigned long start = millis();
567			analogWrite(PWM_TURN, TRC_MAX);
568	
--&gt;569			if (start - startTime_3 &gt;= turn_speed_total)
570			{
571				Serial.println("Turning right");
572				turnDirection = straight;
573				analogWrite(PWM_TURN, TRC_NEUTRAL);
574				no_right = true;
575				startTime_3 = start;
576			}
577		}
578	}
</Source>
      </BreakPoint>
      <BreakPoint Index="12" Name="Controller.ino, line 551" Id="e6198dcc-5868-40d0-bc9f-2dc5fa8752a4" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="551" FileColumn="1" FunctionName="turnLeft()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='e6198dcc-5868-40d0-bc9f-2dc5fa8752a4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>544	
545	void turnLeft()
546	{
547		unsigned long start = millis();
548	
549		analogWrite(PWM_TURN, TRC_MIN);
550	
--&gt;551		if (start - startTime_6 &gt;= turn_speed_total)
552		{
553			Serial.println("Turning left");
554			turnDirection = straight;
555			analogWrite(PWM_TURN, TRC_NEUTRAL);
556			no_right = false;
557			startTime_6 = start;
558		}
559		return;
560	
</Source>
      </BreakPoint>
      <BreakPoint Index="13" Name="Controller.ino, line 574" Id="d8dbe826-a720-4c6b-afc7-90565531c177" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="574" FileColumn="1" FunctionName="turnRight()" FunctionLineOffset="11" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d8dbe826-a720-4c6b-afc7-90565531c177'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>567			analogWrite(PWM_TURN, TRC_MAX);
568	
569			if (start - startTime_3 &gt;= turn_speed_total)
570			{
571				Serial.println("Turning right");
572				turnDirection = straight;
573				analogWrite(PWM_TURN, TRC_NEUTRAL);
--&gt;574				no_right = true;
575				startTime_3 = start;
576			}
577		}
578	}
579	
580	void setSpeed(int speed)
581	{
582		analogWrite(PWM_SPEED, speed);
583	}
</Source>
      </BreakPoint>
      <BreakPoint Index="14" Name="Controller.ino, line 556" Id="4c446f92-44a9-46da-bb88-60c56087f92c" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="556" FileColumn="1" FunctionName="turnLeft()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4c446f92-44a9-46da-bb88-60c56087f92c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>549		analogWrite(PWM_TURN, TRC_MIN);
550	
551		if (start - startTime_6 &gt;= turn_speed_total)
552		{
553			Serial.println("Turning left");
554			turnDirection = straight;
555			analogWrite(PWM_TURN, TRC_NEUTRAL);
--&gt;556			no_right = false;
557			startTime_6 = start;
558		}
559		return;
560	
561	}
562	void turnRight() //turn to the right
563	{
564		if (no_right != true) // checks to make sure right direction does not go over 1 in throw
565		{
</Source>
      </BreakPoint>
      <BreakPoint Index="15" Name="Controller.ino, line 616" Id="539c6d8b-1697-494f-9184-548a88dee7f1" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="616" FileColumn="1" FunctionName="turnMotor()" FunctionLineOffset="33" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='539c6d8b-1697-494f-9184-548a88dee7f1'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>609					analogWrite(PWM_TURN, TRC_NEUTRAL);
610					no_right = false;
611					startTime_5 = start;
612					oldTurnDirection = straight;
613				}
614			}
615			else
--&gt;616				oldTurnDirection = straight;
617		}
618	
619		else if (turnDirection == left)
620		{
621			if (oldTurnDirection == right)
622			{
623				turnDirection = straight;
624				turnMotor();
625				turnDirection = left;
</Source>
      </BreakPoint>
      <BreakPoint Index="16" Name="Controller.ino, line 401" Id="229ceb21-2a19-4bcb-b92e-d132c42ea72b" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="401" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="34" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='229ceb21-2a19-4bcb-b92e-d132c42ea72b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>394			setSpeed(speed);
395		}
396	
397		else if (sonarDistanceLeft &lt;  TURN_DISTANCE &amp;&amp; sonarDistanceLeft &gt; STOP_DISTANCE || sonarDistanceRight &lt;  TURN_DISTANCE &amp;&amp; sonarDistanceRight &gt; STOP_DISTANCE)  // getting close, time to turn to avoid object        
398		{
399			setSpeed(SLOW_SPEED);
400	
--&gt;401			if (LeftWall == true &amp;&amp; RightWall != true)
402			{
403				turnDirection = right;
404			}
405			else if (RightWall == true &amp;&amp; LeftWall != true)
406			{
407				turnDirection = left;
408			}
409			/*else
410			{
</Source>
      </BreakPoint>
      <BreakPoint Index="17" Name="Controller.ino, line 405" Id="c3c338ef-d9c4-408b-abfd-1215f8fadc84" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="405" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="38" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c3c338ef-d9c4-408b-abfd-1215f8fadc84'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>398		{
399			setSpeed(SLOW_SPEED);
400	
401			if (LeftWall == true &amp;&amp; RightWall != true)
402			{
403				turnDirection = right;
404			}
--&gt;405			else if (RightWall == true &amp;&amp; LeftWall != true)
406			{
407				turnDirection = left;
408			}
409			/*else
410			{
411				if (headingError &lt;= 0)
412					turnDirection = left;
413				else
414					turnDirection = right;
</Source>
      </BreakPoint>
      <BreakPoint Index="18" Name="Controller.ino, line 409" Id="e98e0be0-22f6-4ad3-bfcd-26646f9a6e01" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="409" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="42" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='e98e0be0-22f6-4ad3-bfcd-26646f9a6e01'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>402			{
403				turnDirection = right;
404			}
405			else if (RightWall == true &amp;&amp; LeftWall != true)
406			{
407				turnDirection = left;
408			}
--&gt;409			/*else
410			{
411				if (headingError &lt;= 0)
412					turnDirection = left;
413				else
414					turnDirection = right;
415			}*/
416			turnMotor();  // turn in the new direction
417		}
418	
</Source>
      </BreakPoint>
      <BreakPoint Index="19" Name="Controller.ino, line 397" Id="48659f04-fb1a-46c4-bf26-75a407e8d424" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="397" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="30" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='48659f04-fb1a-46c4-bf26-75a407e8d424'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>390			{
391				speed = TURN_SPEED;
392				turnMotor();      // alraedy turning to navigate
393			}
394			setSpeed(speed);
395		}
396	
--&gt;397		else if (sonarDistanceLeft &lt;  TURN_DISTANCE &amp;&amp; sonarDistanceLeft &gt; STOP_DISTANCE || sonarDistanceRight &lt;  TURN_DISTANCE &amp;&amp; sonarDistanceRight &gt; STOP_DISTANCE)  // getting close, time to turn to avoid object        
398		{
399			setSpeed(SLOW_SPEED);
400	
401			if (LeftWall == true &amp;&amp; RightWall != true)
402			{
403				turnDirection = right;
404			}
405			else if (RightWall == true &amp;&amp; LeftWall != true)
406			{
</Source>
      </BreakPoint>
      <BreakPoint Index="20" Name="Controller.ino, line 384" Id="2502aaeb-7d1c-4ec4-a241-6fde84c6209d" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="384" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2502aaeb-7d1c-4ec4-a241-6fde84c6209d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>377				speed = TURN_SPEED;
378				setSpeed(speed);
379			}
380			
381			turnMotor();
382		}
383	
--&gt;384		else if (sonarDistanceLeft &gt; TURN_DISTANCE &amp;&amp; sonarDistanceLeft &lt; SAFE_DISTANCE || sonarDistanceRight &gt; TURN_DISTANCE &amp;&amp; sonarDistanceRight &lt; SAFE_DISTANCE)    // not yet time to turn, but slow down
385		{
386	
387			if (turnDirection == straight)
388				speed = NORMAL_SPEED;
389			else
390			{
391				speed = TURN_SPEED;
392				turnMotor();      // alraedy turning to navigate
393			}
</Source>
      </BreakPoint>
      <BreakPoint Index="21" Name="Controller.ino, line 368" Id="46c2acee-53d9-48ae-a47a-0343675a61f8" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="368" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='46c2acee-53d9-48ae-a47a-0343675a61f8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>361	}  // calcDesiredTurn()
362	
363	void moveAndAvoid(void)
364	{
365		//sonarDistanceLeft = distInLeft; // dist  of left sensor from cm to in
366		//sonarDistanceRight = distInRight; //dist of right sensor from cm to in
367		//checkBoolSonar();
--&gt;368		if (sonarDistanceLeft &gt;= SAFE_DISTANCE || sonarDistanceRight &gt;= SAFE_DISTANCE)       // no close objects in front of car
369		{
370			if (turnDirection == straight)
371			{
372				speed = FAST_SPEED;
373				setSpeed(speed);
374			}
375			else
376			{
377				speed = TURN_SPEED;
</Source>
      </BreakPoint>
      <BreakPoint Index="22" Name="Controller.ino, line 419" Id="b24bbebd-9abf-4690-8112-24b9cd60afd8" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="419" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="52" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b24bbebd-9abf-4690-8112-24b9cd60afd8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>412					turnDirection = left;
413				else
414					turnDirection = right;
415			}*/
416			turnMotor();  // turn in the new direction
417		}
418	
--&gt;419		else if (sonarDistanceLeft &lt; STOP_DISTANCE || sonarDistanceRight &lt; STOP_DISTANCE)          // too close, stop and back up
420		{
421			setSpeed(NO_SPEED);
422			turnDirection = straight; // straighten up
423			turnMotor();
424	
425			Serial.println("\n\nSTOP\n\n");
426	
427			while (sonarDistanceLeft &lt; TURN_DISTANCE || sonarDistanceRight &lt; TURN_DISTANCE)       // backup until we get safe clearance
428			{
</Source>
      </BreakPoint>
      <BreakPoint Index="23" Name="Controller.ino, line 429" Id="7cf3b3c1-d9c3-409c-9dec-db736223c8b2" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="429" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="62" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7cf3b3c1-d9c3-409c-9dec-db736223c8b2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>422			turnDirection = straight; // straighten up
423			turnMotor();
424	
425			Serial.println("\n\nSTOP\n\n");
426	
427			while (sonarDistanceLeft &lt; TURN_DISTANCE || sonarDistanceRight &lt; TURN_DISTANCE)       // backup until we get safe clearance
428			{
--&gt;429				setSpeed(REVERSE_SPEED);
430				autoHornController();
431				processGPS();
432				currentHeading = readCompass();    // get our current heading
433				calcDesiredTurn();                // calculate how we would optimatally turn, without regard to obstacles      
434	
435				checkSonar();		// distance in front of us, move, and avoid obstacles as necessary
436	
437				// update display and serial monitor    
438				updateDisplay();
</Source>
      </BreakPoint>
      <BreakPoint Index="24" Name="Controller.ino, line 800" Id="fbbe87bf-b48e-41a7-a019-2acd74edad0f" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="800" FileColumn="1" FunctionName="getFrontLeftDistance()" FunctionLineOffset="31" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='fbbe87bf-b48e-41a7-a019-2acd74edad0f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>793		}
794	
795		// Calculating the distance (cm)
796		distance = (duration * 1.1364) / 74 / 2;
797	
798		if (distance &lt; 177.8)
799		{
--&gt;800			LeftWall = true;
801		}
802		else
803		{
804			LeftWall = false;
805		}
806	
807		if (distance &lt;= 600 &amp;&amp; distance &gt;= 20)
808		{
809			if (distance &lt;= 60 &amp;&amp; distance &gt;= 20)
</Source>
      </BreakPoint>
      <BreakPoint Index="25" Name="Controller.ino, line 804" Id="1f0c016d-f419-49e5-b4ff-a7b1b393957e" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="804" FileColumn="1" FunctionName="getFrontLeftDistance()" FunctionLineOffset="34" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1f0c016d-f419-49e5-b4ff-a7b1b393957e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>797	
798		if (distance &lt; 177.8)
799		{
800			LeftWall = true;
801		}
802		else
803		{
--&gt;804			LeftWall = false;
805		}
806	
807		if (distance &lt;= 600 &amp;&amp; distance &gt;= 20)
808		{
809			if (distance &lt;= 60 &amp;&amp; distance &gt;= 20)
810			{
811				hornController();
812			}
813			return distance;
</Source>
      </BreakPoint>
      <BreakPoint Index="26" Name="Controller.ino, line 377" Id="3e06e5dc-2dfa-41fc-a36a-135e9ad6b40a" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="377" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3e06e5dc-2dfa-41fc-a36a-135e9ad6b40a'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>370			if (turnDirection == straight)
371			{
372				speed = FAST_SPEED;
373				setSpeed(speed);
374			}
375			else
376			{
--&gt;377				speed = TURN_SPEED;
378				setSpeed(speed);
379			}
380			
381			turnMotor();
382		}
383	
384		else if (sonarDistanceLeft &gt; TURN_DISTANCE &amp;&amp; sonarDistanceLeft &lt; SAFE_DISTANCE || sonarDistanceRight &gt; TURN_DISTANCE &amp;&amp; sonarDistanceRight &lt; SAFE_DISTANCE)    // not yet time to turn, but slow down
385		{
386	
</Source>
      </BreakPoint>
      <BreakPoint Index="27" Name="Controller.ino, line 372" Id="5a85250d-02a5-4b31-a013-98eb51bdd6c8" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\miniminor\documents\scarecrowrepo\scarecrowrepo\arduino\controller\controller.ino" FileLine="372" FileColumn="1" FunctionName="moveAndAvoid(void)" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5a85250d-02a5-4b31-a013-98eb51bdd6c8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>365		//sonarDistanceLeft = distInLeft; // dist  of left sensor from cm to in
366		//sonarDistanceRight = distInRight; //dist of right sensor from cm to in
367		//checkBoolSonar();
368		if (sonarDistanceLeft &gt;= SAFE_DISTANCE || sonarDistanceRight &gt;= SAFE_DISTANCE)       // no close objects in front of car
369		{
370			if (turnDirection == straight)
371			{
--&gt;372				speed = FAST_SPEED;
373				setSpeed(speed);
374			}
375			else
376			{
377				speed = TURN_SPEED;
378				setSpeed(speed);
379			}
380			
381			turnMotor();
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>